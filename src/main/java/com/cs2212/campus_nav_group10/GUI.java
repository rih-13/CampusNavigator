
package com.cs2212.campus_nav_group10;

import static com.cs2212.campus_nav_group10.UserLogin.newUser;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

/**
 *
 * @author benhaller
 */
public class GUI extends javax.swing.JFrame {

    private static Systems systemMonitor = new Systems();
    
    // Resources to load in map images
    GUIResources GUISource = new GUIResources();
    private String[] currMapNames;
    private String[] currMapFiles;
    private BufferedImage mapImage;
    
    // Resources to track floor changes
    private int currBuildingNum;
    private int currFloorNum;
    
    // Weather variables
    private Weather weather;
    private String weatherDesc;
    private double weatherTemp;
    private String tempString;
    private String weatherCode;
    private String weatherIcon;
    private JPanel weatherPanel;
    private BufferedImage iconImage;
    
    // Resources to track current floor's POIs
    POI[] currClassroomPOIs = new POI[20];
    String[] currClassroomNames = new String[20];
    POIJLabel[] currClassroomJLabels = new POIJLabel[20];
    
    POI[] currBathroomPOIs = new POI[20];
    String[] currBathroomNames = new String[20];
    POIJLabel[] currBathroomJLabels = new POIJLabel[20];
    
    POI[] currRestaurantPOIs = new POI[20];
    String[] currRestaurantNames = new String[20];
    POIJLabel[] currRestaurantJLabels = new POIJLabel[20];
    
    POI[] currLabPOIs = new POI[20];
    String[] currLabNames = new String[20];
    POIJLabel[] currLabJLabels = new POIJLabel[20];
    
    POI[] currAccessibilityPOIs = new POI[20];
    String[] currAccessibilityNames = new String[20];
    POIJLabel[] currAccessibilityJLabels = new POIJLabel[20];
    
    POI[] currCompSciPOIs = new POI[20];
    String[] currCompSciNames = new String[20];
    POIJLabel[] currCompSciJLabels = new POIJLabel[20];
    
    POI[] currCustomPOIs = new POI[20];
    String[] currCustomNames = new String[20];
    POIJLabel[] currCustomJLabels = new POIJLabel[20];
    
    // Resources for the favourites panel
    POI[] currFavouritePOIs = new POI[20];
    String[] currFavouriteNames = new String[20];
    POIJLabel[] currFavouriteJLabels = new POIJLabel[20];
    
    // Resources to track selected layers
    // Indexes correspond to Classrooms, Bathrooms, Restaurants, Accessibility points, Computer Science spaces and Custom (user-specific) POIs
    Boolean[] selectedLayers = {true, true, true, true, true, true, true};
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        mapLabel.setOpaque(false); // so users can click on POI icons
        displayWeather(weatherTab); 
        layeredMapPane.setLayer(mapLabel, 0); // hide create metapoi button if user not developer
        
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); // Prevent the app from closing automatically
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
            // Open a popup to confirm whether the user wants to exit
                int choice = JOptionPane.showConfirmDialog(GUI.this,
                        "Are you sure you want to exit?",
                        "Confirm Exit",
                        JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    systemMonitor.loggedOff();
                    dispose();
                    System.exit(0);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MasterPanel = new javax.swing.JPanel();
        LoginPanel = new javax.swing.JPanel();
        jlTitle = new javax.swing.JLabel();
        jlPassword = new javax.swing.JLabel();
        jlUsername = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        pfPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jlLoginVerify = new javax.swing.JLabel();
        jlDeveloperCheck = new javax.swing.JLabel();
        Create = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BuildingSelectPanel = new javax.swing.JPanel();
        btnMiddlesex = new javax.swing.JButton();
        btnPAB = new javax.swing.JButton();
        btnNatSci = new javax.swing.JButton();
        FloorViewPanel = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        tabbedPane = new javax.swing.JTabbedPane();
        floorsTab = new javax.swing.JPanel();
        floorsScrollPane = new javax.swing.JScrollPane();
        floorList = new javax.swing.JList<>();
        mapShowButton = new javax.swing.JButton();
        buildingButton = new javax.swing.JButton();
        weatherTab = new javax.swing.JPanel();
        noMapSelectedButton = new javax.swing.JLabel();
        floorPOIsTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        floorPOIPanel = new javax.swing.JPanel();
        classroomsLabel = new javax.swing.JLabel();
        bathroomsLabel = new javax.swing.JLabel();
        restaurantsLabel = new javax.swing.JLabel();
        customPOILabel = new javax.swing.JLabel();
        labsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        restaurantsList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        classroomsList = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        bathroomsList = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        labsList = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        customPOIList = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        accessibilityList = new javax.swing.JList<>();
        accessibilityLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        compsciList = new javax.swing.JList<>();
        compsciLabel = new javax.swing.JLabel();
        classroomsToggleButton = new javax.swing.JToggleButton();
        bathroomsToggleButton = new javax.swing.JToggleButton();
        restaurantsToggleButton = new javax.swing.JToggleButton();
        labsToggleButton = new javax.swing.JToggleButton();
        accessibilityToggleButton = new javax.swing.JToggleButton();
        compsciToggleButton = new javax.swing.JToggleButton();
        customToggleButton = new javax.swing.JToggleButton();
        addPOIsTab = new javax.swing.JPanel();
        createPOIButton = new javax.swing.JButton();
        createMetaPOIButton = new javax.swing.JButton();
        favouritesTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        favouritesList = new javax.swing.JList<>();
        mapScrollPane = new javax.swing.JScrollPane();
        layeredMapPane = new javax.swing.JLayeredPane();
        mapLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 600));
        setSize(new java.awt.Dimension(1100, 600));
        getContentPane().setLayout(null);

        MasterPanel.setLayout(new java.awt.CardLayout());

        LoginPanel.setLayout(null);

        jlTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jlTitle.setForeground(new java.awt.Color(255, 255, 255));
        jlTitle.setText("Campus Navigator");
        LoginPanel.add(jlTitle);
        jlTitle.setBounds(375, 165, 310, 44);

        jlPassword.setText("Password");
        LoginPanel.add(jlPassword);
        jlPassword.setBounds(360, 240, 60, 20);

        jlUsername.setText("Username");
        LoginPanel.add(jlUsername);
        jlUsername.setBounds(360, 220, 60, 17);
        LoginPanel.add(tfUsername);
        tfUsername.setBounds(425, 218, 262, 23);
        LoginPanel.add(pfPassword);
        pfPassword.setBounds(425, 243, 262, 23);

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        LoginPanel.add(btnLogin);
        btnLogin.setBounds(429, 268, 110, 23);
        LoginPanel.add(jlLoginVerify);
        jlLoginVerify.setBounds(425, 298, 262, 20);
        LoginPanel.add(jlDeveloperCheck);
        jlDeveloperCheck.setBounds(425, 324, 261, 23);

        Create.setText("Create Account");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });
        LoginPanel.add(Create);
        Create.setBounds(550, 268, 130, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/background.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        LoginPanel.add(jLabel1);
        jLabel1.setBounds(0, -30, 1100, 610);

        MasterPanel.add(LoginPanel, "card2");

        btnMiddlesex.setText("Middlesex College");
        btnMiddlesex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMiddlesexActionPerformed(evt);
            }
        });

        btnPAB.setText("Physics & Astronomy");
        btnPAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPABActionPerformed(evt);
            }
        });

        btnNatSci.setText("Natural Science");
        btnNatSci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNatSciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BuildingSelectPanelLayout = new javax.swing.GroupLayout(BuildingSelectPanel);
        BuildingSelectPanel.setLayout(BuildingSelectPanelLayout);
        BuildingSelectPanelLayout.setHorizontalGroup(
            BuildingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuildingSelectPanelLayout.createSequentialGroup()
                .addGap(465, 465, 465)
                .addGroup(BuildingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMiddlesex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNatSci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPAB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(481, Short.MAX_VALUE))
        );
        BuildingSelectPanelLayout.setVerticalGroup(
            BuildingSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuildingSelectPanelLayout.createSequentialGroup()
                .addGap(221, 221, 221)
                .addComponent(btnMiddlesex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPAB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNatSci)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        MasterPanel.add(BuildingSelectPanel, "card3");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.setName(""); // NOI18N
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        floorsScrollPane.setViewportView(floorList);

        mapShowButton.setText("Show");
        mapShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapShowButtonActionPerformed(evt);
            }
        });

        buildingButton.setText("Building View");
        buildingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout weatherTabLayout = new javax.swing.GroupLayout(weatherTab);
        weatherTab.setLayout(weatherTabLayout);
        weatherTabLayout.setHorizontalGroup(
            weatherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        weatherTabLayout.setVerticalGroup(
            weatherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout floorsTabLayout = new javax.swing.GroupLayout(floorsTab);
        floorsTab.setLayout(floorsTabLayout);
        floorsTabLayout.setHorizontalGroup(
            floorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorsTabLayout.createSequentialGroup()
                .addGroup(floorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(floorsTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(floorsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
                    .addComponent(weatherTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(floorsTabLayout.createSequentialGroup()
                        .addGroup(floorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(floorsTabLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(mapShowButton))
                            .addGroup(floorsTabLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addGroup(floorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buildingButton)
                                    .addComponent(noMapSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        floorsTabLayout.setVerticalGroup(
            floorsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(floorsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapShowButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildingButton)
                .addGap(41, 41, 41)
                .addComponent(noMapSelectedButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(weatherTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Floors", floorsTab);

        jScrollPane1.setHorizontalScrollBar(null);

        classroomsLabel.setText("Classrooms");

        bathroomsLabel.setText("Bathrooms");

        restaurantsLabel.setText("Restaurants");

        customPOILabel.setText("Custom POI");

        labsLabel.setText("Labs");

        restaurantsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                restaurantsListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(restaurantsList);

        classroomsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                classroomsListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(classroomsList);

        bathroomsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                bathroomsListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(bathroomsList);

        labsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                labsListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(labsList);

        customPOIList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                customPOIListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(customPOIList);

        accessibilityList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                accessibilityListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(accessibilityList);

        accessibilityLabel.setText("Accessibility");

        compsciList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                compsciListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(compsciList);

        compsciLabel.setText("Computer Science");

        classroomsToggleButton.setSelected(true);
        classroomsToggleButton.setText("On");
        classroomsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                buttonToggled(evt);
            }
        });
        classroomsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classroomsToggleButtonActionPerformed(evt);
            }
        });

        bathroomsToggleButton.setSelected(true);
        bathroomsToggleButton.setText("On");
        bathroomsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bathroomsToggleButtonbuttonToggled(evt);
            }
        });
        bathroomsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bathroomsToggleButtonActionPerformed(evt);
            }
        });

        restaurantsToggleButton.setSelected(true);
        restaurantsToggleButton.setText("On");
        restaurantsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                restaurantsToggleButtonbuttonToggled(evt);
            }
        });
        restaurantsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaurantsToggleButtonActionPerformed(evt);
            }
        });

        labsToggleButton.setSelected(true);
        labsToggleButton.setText("On");
        labsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                labsToggleButtonbuttonToggled(evt);
            }
        });
        labsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labsToggleButtonActionPerformed(evt);
            }
        });

        accessibilityToggleButton.setSelected(true);
        accessibilityToggleButton.setText("On");
        accessibilityToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                accessibilityToggleButtonbuttonToggled(evt);
            }
        });
        accessibilityToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessibilityToggleButtonActionPerformed(evt);
            }
        });

        compsciToggleButton.setSelected(true);
        compsciToggleButton.setText("On");
        compsciToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                compsciToggleButtonbuttonToggled(evt);
            }
        });
        compsciToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compsciToggleButtonActionPerformed(evt);
            }
        });

        customToggleButton.setSelected(true);
        customToggleButton.setText("On");
        customToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customToggleButtonbuttonToggled(evt);
            }
        });
        customToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout floorPOIPanelLayout = new javax.swing.GroupLayout(floorPOIPanel);
        floorPOIPanel.setLayout(floorPOIPanelLayout);
        floorPOIPanelLayout.setHorizontalGroup(
            floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(floorPOIPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(classroomsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(classroomsToggleButton))
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(bathroomsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bathroomsToggleButton))
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(restaurantsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(restaurantsToggleButton))
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(labsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labsToggleButton))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(accessibilityLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(accessibilityToggleButton))
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(compsciLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(compsciToggleButton))
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(floorPOIPanelLayout.createSequentialGroup()
                            .addComponent(customPOILabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customToggleButton))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        floorPOIPanelLayout.setVerticalGroup(
            floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classroomsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classroomsToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bathroomsLabel)
                    .addComponent(bathroomsToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restaurantsLabel)
                    .addComponent(restaurantsToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labsLabel)
                    .addComponent(labsToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessibilityLabel)
                    .addComponent(accessibilityToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compsciLabel)
                    .addComponent(compsciToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(floorPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customPOILabel)
                    .addComponent(customToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(floorPOIPanel);

        javax.swing.GroupLayout floorPOIsTabLayout = new javax.swing.GroupLayout(floorPOIsTab);
        floorPOIsTab.setLayout(floorPOIsTabLayout);
        floorPOIsTabLayout.setHorizontalGroup(
            floorPOIsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorPOIsTabLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );
        floorPOIsTabLayout.setVerticalGroup(
            floorPOIsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(floorPOIsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Floor POI", floorPOIsTab);

        createPOIButton.setText("Create new POI");
        createPOIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPOIButtonActionPerformed(evt);
            }
        });

        createMetaPOIButton.setText("Create new Metadata POI");
        createMetaPOIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMetaPOIButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPOIsTabLayout = new javax.swing.GroupLayout(addPOIsTab);
        addPOIsTab.setLayout(addPOIsTabLayout);
        addPOIsTabLayout.setHorizontalGroup(
            addPOIsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPOIsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPOIsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createPOIButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createMetaPOIButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        addPOIsTabLayout.setVerticalGroup(
            addPOIsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPOIsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createPOIButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createMetaPOIButton)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Add POI", addPOIsTab);

        jLabel2.setText("Favourites");

        favouritesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                favouritesListValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(favouritesList);

        javax.swing.GroupLayout favouritesTabLayout = new javax.swing.GroupLayout(favouritesTab);
        favouritesTab.setLayout(favouritesTabLayout);
        favouritesTabLayout.setHorizontalGroup(
            favouritesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(favouritesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(favouritesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        favouritesTabLayout.setVerticalGroup(
            favouritesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(favouritesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Favourites", favouritesTab);

        mapScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        mapScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        mapLabel.setText("No Map Loaded Yet!");
        mapLabel.setToolTipText("");

        layeredMapPane.setLayer(mapLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredMapPaneLayout = new javax.swing.GroupLayout(layeredMapPane);
        layeredMapPane.setLayout(layeredMapPaneLayout);
        layeredMapPaneLayout.setHorizontalGroup(
            layeredMapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredMapPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapLabel)
                .addContainerGap(807, Short.MAX_VALUE))
        );
        layeredMapPaneLayout.setVerticalGroup(
            layeredMapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredMapPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapLabel)
                .addContainerGap(943, Short.MAX_VALUE))
        );

        mapScrollPane.setViewportView(layeredMapPane);

        javax.swing.GroupLayout FloorViewPanelLayout = new javax.swing.GroupLayout(FloorViewPanel);
        FloorViewPanel.setLayout(FloorViewPanelLayout);
        FloorViewPanelLayout.setHorizontalGroup(
            FloorViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FloorViewPanelLayout.createSequentialGroup()
                .addComponent(mapScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FloorViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FloorViewPanelLayout.createSequentialGroup()
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addContainerGap())
                    .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        FloorViewPanelLayout.setVerticalGroup(
            FloorViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FloorViewPanelLayout.createSequentialGroup()
                .addGroup(FloorViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(FloorViewPanelLayout.createSequentialGroup()
                        .addGroup(FloorViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        MasterPanel.add(FloorViewPanel, "card4");

        getContentPane().add(MasterPanel);
        MasterPanel.setBounds(0, 0, 1100, 580);

        fileMenu.setText("Help");
        fileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fileMenuMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fileMenuMousePressed(evt);
            }
        });
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });
        MenuBar.add(fileMenu);

        editMenu.setText("About");
        editMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editMenuMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editMenuMousePressed(evt);
            }
        });
        editMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuActionPerformed(evt);
            }
        });
        MenuBar.add(editMenu);

        setJMenuBar(MenuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            UserLogin loginCheck = new UserLogin();
            String enteredUser = tfUsername.getText();
            String enteredPassword = pfPassword.getText();
            String username = new String();
            
            if ((enteredUser != null) && (enteredPassword != null)) {
                username = loginCheck.isValid(enteredUser, enteredPassword);
            }
            
            if (username != null) {
                
                jlLoginVerify.setText("Login successful! Username: " + username);
                boolean isDeveloper = loginCheck.isDeveloper(username);
                
                /* Campus_Navigation.setDeveloperMode(isDeveloper);
                Campus_Navigation.setUser(username); */
                
                if (isDeveloper == true) {
                    jlDeveloperCheck.setText("Entering Developer Mode...");
                }
                else {
                    jlDeveloperCheck.setText("Entering User Mode...");
                }
                
                MasterPanel.removeAll();
                MasterPanel.add(BuildingSelectPanel);
                MasterPanel.repaint();
                MasterPanel.revalidate();
                
                systemMonitor.setDeveloperMode(loginCheck.isDev(username));
                systemMonitor.setcurrUsername(username);
                systemMonitor.loggedIn();
                
                if (systemMonitor.getDeveloperMode() == false) {
                    createMetaPOIButton.setVisible(false);
                    createMetaPOIButton.setEnabled(false);   
                }
            }
            else {
                jlLoginVerify.setText("Invalid User Information");
                jlDeveloperCheck.setText("");
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnMiddlesexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMiddlesexActionPerformed
        
        currMapNames = GUISource.getMapNames("MiddlesexCollege");
        currMapFiles = GUISource.getMapFiles("MiddlesexCollege");
        currBuildingNum = 0;
        currFloorNum = 1;
        
        systemMonitor.setBuildingNum(currBuildingNum);
        systemMonitor.setFloorNum(currFloorNum);
        
        MasterPanel.removeAll();
        
        floorList.setListData(currMapNames);
        
        URL mapFile;
        mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[1]);
        try {
            mapImage = ImageIO.read(mapFile);
            mapLabel.setIcon(new ImageIcon(mapImage));
            mapLabel.setText("");
        } catch (IOException ex) {
            System.out.println("Error reading POI image");
            System.out.println("Your class path is: " + System.getProperty("java.class.path"));
        }
        
        MasterPanel.add(FloorViewPanel);
        MasterPanel.repaint();
        MasterPanel.revalidate();
        
        initializeMapPOI();
    }//GEN-LAST:event_btnMiddlesexActionPerformed

    private void mapShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapShowButtonActionPerformed
        
        URL mapFile;
        int index = floorList.getSelectedIndex(); // find out what item in the map list is selected
        
        currFloorNum = index;
        
        systemMonitor.setFloorNum(currFloorNum);

        if (index == -1) {
            
            noMapSelectedButton.setText("<html>Error: no map has<br>been selected!</html>");
        }
        if(index < currMapFiles.length) {
            //This trys to find the location of the map file.
            //if mapFile is null, it could not find the file (not on class path?)

            mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[index]);

            //try to load the map image and set it on the map icon
            try {
                mapImage = ImageIO.read(mapFile);
                mapLabel.setIcon(new ImageIcon(mapImage));
                mapLabel.setText("");

            } catch (IOException ex) {
                System.out.println("Error reading " + currMapFiles[index]);
                System.out.println("Your class path is: " + System.getProperty("java.class.path"));
                if(mapFile != null)
                System.out.println("URL: " + mapFile.toString());
            }

        
        }
        
        
        initializeMapPOI();
    }//GEN-LAST:event_mapShowButtonActionPerformed

    private void btnNatSciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNatSciActionPerformed
        
        currMapNames = GUISource.getMapNames("NaturalScience");
        currMapFiles = GUISource.getMapFiles("NaturalScience");
        currBuildingNum = 2;
        currFloorNum = 1;
        
        systemMonitor.setBuildingNum(currBuildingNum);
        systemMonitor.setFloorNum(currFloorNum);
        
        MasterPanel.removeAll();
        
        floorList.setListData(currMapNames);
        
        URL mapFile;
        mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[1]);
        try {
            mapImage = ImageIO.read(mapFile);
            mapLabel.setIcon(new ImageIcon(mapImage));
            mapLabel.setText("");
        } catch (IOException ex) {
            System.out.println("Error reading POI image");
            System.out.println("Your class path is: " + System.getProperty("java.class.path"));
        }
        
        MasterPanel.add(FloorViewPanel);
        MasterPanel.repaint();
        MasterPanel.revalidate();

        initializeMapPOI();
    }//GEN-LAST:event_btnNatSciActionPerformed

    private void btnPABActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPABActionPerformed
        
        currMapNames = GUISource.getMapNames("PhysicsAstronomy");
        currMapFiles = GUISource.getMapFiles("PhysicsAstronomy");
        currBuildingNum = 1;
        currFloorNum = 1;
        
        systemMonitor.setBuildingNum(currBuildingNum);
        systemMonitor.setFloorNum(currFloorNum);
        
        MasterPanel.removeAll();
        
        floorList.setListData(currMapNames);
        
        URL mapFile;
        mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[1]);
        try {
            mapImage = ImageIO.read(mapFile);
            mapLabel.setIcon(new ImageIcon(mapImage));
            mapLabel.setText("");
        } catch (IOException ex) {
            System.out.println("Error reading POI image");
            System.out.println("Your class path is: " + System.getProperty("java.class.path"));
        }
        
        MasterPanel.add(FloorViewPanel);
        MasterPanel.repaint();
        MasterPanel.revalidate();
        
        initializeMapPOI();
    }//GEN-LAST:event_btnPABActionPerformed

    private void buildingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingButtonActionPerformed
        
        MasterPanel.removeAll();
        MasterPanel.add(BuildingSelectPanel);
        MasterPanel.repaint();
        MasterPanel.revalidate();
    }//GEN-LAST:event_buildingButtonActionPerformed

    private void createPOIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPOIButtonActionPerformed
        createPOIButton.setBackground(new Color(177, 216, 242));
        createPOIButton.setOpaque(true);
        createPOIButton.setBorderPainted(false);
        mapLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
             // initialize the variables to store previous entered text
                String prevName = "";
                String prevDesc = "";
                String prevRoomNum = "";


                while (true) {
                    JFrame createPOIFrame = new JFrame();
                    
                    JPanel createPOIPanel = new JPanel();
                    createPOIPanel.setLayout(new BoxLayout(createPOIPanel, BoxLayout.Y_AXIS));
    
                    JTextField getName = new JTextField(prevName, 20);
                    JTextField getDesc = new JTextField(prevDesc, 30);
                    JTextField getRoomNum = new JTextField(prevRoomNum, 10);

                    JLabel nameLabel = new JLabel("Name:");
                    JLabel descLabel = new JLabel("Description:");
                    JLabel roomNumLabel = new JLabel("Room Number:");

                    createPOIPanel.add(nameLabel);
                    createPOIPanel.add(getName);
                    createPOIPanel.add(descLabel);
                    createPOIPanel.add(getDesc);
                    createPOIPanel.add(roomNumLabel);
                    createPOIPanel.add(getRoomNum);
                    createPOIFrame.add(createPOIPanel);
                    createPOIFrame.addWindowListener(new WindowAdapter() {
                        public void windowClosing(WindowEvent e) {
                            int option = JOptionPane.showConfirmDialog(createPOIPanel, "Are you sure you want to close?", "Warning", JOptionPane.YES_NO_OPTION);
                            if (option == JOptionPane.YES_OPTION) {
                                createPOIButton.setOpaque(false);
                                createPOIButton.setContentAreaFilled(false);
                                createPOIFrame.dispose();
                            }
                        }
            
                     });
                    
 

                    int result = JOptionPane.showConfirmDialog(null, createPOIPanel, "Enter POI information",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                    if (result == JOptionPane.OK_OPTION) { //user clicked OK
                        String poiName = getName.getText();
                        String poiDesc = getDesc.getText();
                        String poiRoomNum = getRoomNum.getText();
  
                        if (poiName.equals("") || poiRoomNum.equals("")) { // if user did not fill in name or room number
                            JOptionPane.showMessageDialog(null, "Please fill in a name and room number", "Error", JOptionPane.ERROR_MESSAGE);
                            prevName = poiName;             // save the entered text to variables
                            prevDesc = poiDesc;
                            prevRoomNum = poiRoomNum;} 
                        else {  //user filled in all fields correctly 
                            String currBuildingString = getBuildingString(currBuildingNum);
                            POI newUserPOI = new POI(false, true, 6, poiName, poiRoomNum, poiDesc, currBuildingString, currFloorNum, x, y, false);
                            systemMonitor.userpois.add(newUserPOI);
                            systemMonitor.getBuildingsArray()[currBuildingNum].getFloors().get(currFloorNum).addPOI(newUserPOI); // add to Floor Linked List
                            initializeMapPOI();
                            
                            mapLabel.removeMouseListener(this);
                            createPOIButton.setOpaque(true);
                            createPOIButton.setBackground(null);
                            createPOIButton.setBorderPainted(true);
                            break;
                        } 
                    } 
                    else { // user clicked cancel or close instead of OK
                        mapLabel.removeMouseListener(this);
                        createPOIButton.setOpaque(true);
                            createPOIButton.setBackground(null);
                            createPOIButton.setBorderPainted(true);
                        break;
                    } 
    
                }
    
            }
        });
    }//GEN-LAST:event_createPOIButtonActionPerformed

  
    
    private String getBuildingString(int BuildingNum) {
        if (BuildingNum == 0) { return "MC"; }
        else if (BuildingNum == 1) { return "PAB"; }
        else { return "NS"; }
    }
    
    
    private void classroomsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classroomsToggleButtonActionPerformed

        if (classroomsToggleButton.isSelected()) {
            
            selectedLayers[0] = true;
            
            for (int i = 0; i < currClassroomPOIs.length; i++) {
                
                if (currClassroomJLabels[i] != null) {
                    
                    layeredMapPane.add(currClassroomJLabels[i], 0);
                }
            }
            
            classroomsList.setEnabled(true);
        }
        else {
            
            selectedLayers[0] = false;
            
            for (int i = 0; i < currClassroomPOIs.length; i++) {
                
                if (currClassroomJLabels[i] != null) {
                    
                    layeredMapPane.remove(currClassroomJLabels[i]);
                }
            }
            
            classroomsList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_classroomsToggleButtonActionPerformed

    private void buttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_buttonToggled
        
    if (classroomsToggleButton.isSelected()) {
        classroomsToggleButton.setText("On");
    } 
    else {
        classroomsToggleButton.setText("Off");
    }
    }//GEN-LAST:event_buttonToggled

    private void bathroomsToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bathroomsToggleButtonbuttonToggled
        
        if (bathroomsToggleButton.isSelected()) {
        bathroomsToggleButton.setText("On");
    } 
    else {
        bathroomsToggleButton.setText("Off");
    }
    }//GEN-LAST:event_bathroomsToggleButtonbuttonToggled

    private void bathroomsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bathroomsToggleButtonActionPerformed
        
        if (bathroomsToggleButton.isSelected()) {
            
            selectedLayers[1] = true;
            
            for (int i = 0; i < currBathroomPOIs.length; i++) {
                
                if (currBathroomJLabels[i] != null) {
                    layeredMapPane.add(currBathroomJLabels[i], 0);
                }
            }
            
            bathroomsList.setEnabled(true);
        }
        else {
            
            selectedLayers[1] = false;
            
            for (int i = 0; i < currBathroomPOIs.length; i++) {
                
                if (currBathroomJLabels[i] != null) {
                    
                    layeredMapPane.remove(currBathroomJLabels[i]);
                }
            }
            
            bathroomsList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_bathroomsToggleButtonActionPerformed

    private void restaurantsToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_restaurantsToggleButtonbuttonToggled
        
        if (restaurantsToggleButton.isSelected()) {
        restaurantsToggleButton.setText("On");
    } 
    else {
        restaurantsToggleButton.setText("Off");
    }
    }//GEN-LAST:event_restaurantsToggleButtonbuttonToggled

    private void restaurantsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaurantsToggleButtonActionPerformed
        
        if (restaurantsToggleButton.isSelected()) {
            
            selectedLayers[2] = true;
            
            for (int i = 0; i < currRestaurantPOIs.length; i++) {
                
                if (currRestaurantJLabels[i] != null) {
                    layeredMapPane.add(currRestaurantJLabels[i], 0);
                }
            }
            
            restaurantsList.setEnabled(true);
        }
        else {
            
            selectedLayers[2] = false;
            
            for (int i = 0; i < currRestaurantPOIs.length; i++) {
                
                if (currRestaurantJLabels[i] != null) {
                    layeredMapPane.remove(currRestaurantJLabels[i]);
                }
            }
            
            restaurantsList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_restaurantsToggleButtonActionPerformed

    private void labsToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_labsToggleButtonbuttonToggled
        
        if (labsToggleButton.isSelected()) {
        labsToggleButton.setText("On");
    } 
    else {
        labsToggleButton.setText("Off");
    }
    }//GEN-LAST:event_labsToggleButtonbuttonToggled

    private void labsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labsToggleButtonActionPerformed
        
        if (labsToggleButton.isSelected()) {
            
            selectedLayers[3] = true;
            
            for (int i = 0; i < currLabPOIs.length; i++) {
                
                if (currLabJLabels[i] != null) {
                    layeredMapPane.add(currLabJLabels[i], 0);
                }
            }
            
            labsList.setEnabled(true);
        }
        else {
            
            selectedLayers[3] = false;
            
            for (int i = 0; i < currLabPOIs.length; i++) {
                
                if (currLabJLabels[i] != null) {
                    layeredMapPane.remove(currLabJLabels[i]);
                }
            }
            
            labsList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_labsToggleButtonActionPerformed

    private void accessibilityToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_accessibilityToggleButtonbuttonToggled
        
        if (accessibilityToggleButton.isSelected()) {
        accessibilityToggleButton.setText("On");
    } 
    else {
        accessibilityToggleButton.setText("Off");
    }
    }//GEN-LAST:event_accessibilityToggleButtonbuttonToggled

    private void accessibilityToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessibilityToggleButtonActionPerformed
        
        if (accessibilityToggleButton.isSelected()) {
            
            selectedLayers[4] = true;
            
            for (int i = 0; i < currAccessibilityPOIs.length; i++) {

                if (currAccessibilityJLabels[i] != null) {
                    layeredMapPane.add(currAccessibilityJLabels[i], 0);
                }
            }
            
            accessibilityList.setEnabled(true);
        }
        else {
            
            selectedLayers[4] = false;
            
            for (int i = 0; i < currAccessibilityPOIs.length; i++) {

                if (currAccessibilityJLabels[i] != null) {
                    layeredMapPane.remove(currAccessibilityJLabels[i]);
                }
            }
            
            accessibilityList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_accessibilityToggleButtonActionPerformed

    private void compsciToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_compsciToggleButtonbuttonToggled
        
        if (compsciToggleButton.isSelected()) {
        compsciToggleButton.setText("On");
    } 
    else {
        compsciToggleButton.setText("Off");
    }
    }//GEN-LAST:event_compsciToggleButtonbuttonToggled

    private void compsciToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compsciToggleButtonActionPerformed
        
        if (compsciToggleButton.isSelected()) {
            
            selectedLayers[5] = true;
            
            for (int i = 0; i < currCompSciPOIs.length; i++) {

                if (currCompSciJLabels[i] != null) {
                    layeredMapPane.add(currCompSciJLabels[i], 0);
                }
            }
            
            compsciList.setEnabled(true);
        }
        else {
            
            selectedLayers[5] = false;
            
            for (int i = 0; i < currCompSciPOIs.length; i++) {

                if (currCompSciJLabels[i] != null) {
                    layeredMapPane.remove(currCompSciJLabels[i]);
                }
            }
            
            compsciList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_compsciToggleButtonActionPerformed

    private void customToggleButtonbuttonToggled(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customToggleButtonbuttonToggled
        
        if (customToggleButton.isSelected()) {
        customToggleButton.setText("On");
        } 
        else {
            customToggleButton.setText("Off");
        }
    }//GEN-LAST:event_customToggleButtonbuttonToggled

    private void customToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customToggleButtonActionPerformed
        
        if (customToggleButton.isSelected()) {
            
            selectedLayers[6] = true;
            
            for (int i = 0; i < currCompSciPOIs.length; i++) {

                if (currCustomJLabels[i] != null) {
                    layeredMapPane.add(currCustomJLabels[i], 0);
                }
            }
            
            customPOIList.setEnabled(true);
        }
        else {

            selectedLayers[6] = false;
            
            for (int i = 0; i < currCompSciPOIs.length; i++) {

                if (currCustomJLabels[i] != null) {
                    layeredMapPane.remove(currCustomJLabels[i]);
                }
            }
            
            customPOIList.setEnabled(false);
        }
        
        layeredMapPane.revalidate();
        layeredMapPane.repaint();
    }//GEN-LAST:event_customToggleButtonActionPerformed

    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        try {
            UserLogin loginCheck = new UserLogin();
            String enteredUser = tfUsername.getText();
            String enteredPassword = pfPassword.getText();
            String username = loginCheck.isValid(enteredUser, enteredPassword);
            
            if(username == null && loginCheck.isUser(enteredUser) != enteredUser){
                if(enteredUser.equals("")){
                    throw new Exception("Username is empty");
                }
                File meta = new File("src/resources/data/metadata.csv");
                newUser(enteredUser, enteredPassword);
                File newFile = new File( "src/resources/data/"+enteredUser+ ".csv");
                File newFile2 = new File( "src/resources/data/"+enteredUser+ "_FAV.csv");
                newFile2.createNewFile();
                newFile.createNewFile();
                //Files.copy(meta.toPath(), newFile.toPath());
                
                jlLoginVerify.setText("Account Created. Please sign in.");
            }
            
            else{
                jlLoginVerify.setText("User already exists. Please login.");
            }
            
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CreateActionPerformed

    private void classroomsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_classroomsListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        bathroomsList.clearSelection();
        restaurantsList.clearSelection();
        labsList.clearSelection();
        accessibilityList.clearSelection();
        compsciList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((classroomsList.getSelectedIndex() != -1) && (currClassroomJLabels[classroomsList.getSelectedIndex()] != null)) {
            
            layeredMapPane.scrollRectToVisible(currClassroomJLabels[classroomsList.getSelectedIndex()].getBounds());
            
            currClassroomJLabels[classroomsList.getSelectedIndex()].setOpaque(true);
            currClassroomJLabels[classroomsList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currClassroomJLabels[classroomsList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currClassroomNames.length; i++) {
            
            if (currClassroomNames[i] != null) {
                
                if (classroomsList.getSelectedIndex() != i) {
                    
                    if (currClassroomJLabels[i] != null) {
                  
                        currClassroomJLabels[i].setOpaque(false);
                        currClassroomJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_classroomsListValueChanged

    private void bathroomsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_bathroomsListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        restaurantsList.clearSelection();
        labsList.clearSelection();
        accessibilityList.clearSelection();
        compsciList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((bathroomsList.getSelectedIndex() != -1) && (currBathroomJLabels[bathroomsList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currBathroomJLabels[bathroomsList.getSelectedIndex()].getBounds());
            
            currBathroomJLabels[bathroomsList.getSelectedIndex()].setOpaque(true);
            currBathroomJLabels[bathroomsList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currBathroomJLabels[bathroomsList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currBathroomNames.length; i++) {
            
            if (currBathroomNames[i] != null) {
                
                if (bathroomsList.getSelectedIndex() != i) {
                    
                    if (currBathroomJLabels[i] != null) {

                        currBathroomJLabels[i].setOpaque(false);
                        currBathroomJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_bathroomsListValueChanged

    private void restaurantsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_restaurantsListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        bathroomsList.clearSelection();
        labsList.clearSelection();
        accessibilityList.clearSelection();
        compsciList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((restaurantsList.getSelectedIndex() != -1) && (currRestaurantJLabels[restaurantsList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currRestaurantJLabels[restaurantsList.getSelectedIndex()].getBounds());
            
            currRestaurantJLabels[restaurantsList.getSelectedIndex()].setOpaque(true);
            currRestaurantJLabels[restaurantsList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currRestaurantJLabels[restaurantsList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currRestaurantNames.length; i++) {
            
            if (currRestaurantNames[i] != null) {
                
                if (restaurantsList.getSelectedIndex() != i) {
                    
                    if (currRestaurantJLabels[i] != null) {
                        
                        currRestaurantJLabels[i].setOpaque(false);
                        currRestaurantJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_restaurantsListValueChanged

    private void labsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_labsListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        bathroomsList.clearSelection();
        restaurantsList.clearSelection();
        accessibilityList.clearSelection();
        compsciList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((labsList.getSelectedIndex() != -1) && (currLabJLabels[labsList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currLabJLabels[labsList.getSelectedIndex()].getBounds());
        
            currLabJLabels[labsList.getSelectedIndex()].setOpaque(true);
            currLabJLabels[labsList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currLabJLabels[labsList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currLabNames.length; i++) {
            
            if (currLabNames[i] != null) {
                
                if (labsList.getSelectedIndex() != i) {
                    
                    if (currLabJLabels[i] != null) {
                        
                        currLabJLabels[i].setOpaque(false);
                        currLabJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_labsListValueChanged

    private void accessibilityListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_accessibilityListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        bathroomsList.clearSelection();
        restaurantsList.clearSelection();
        labsList.clearSelection();
        compsciList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((accessibilityList.getSelectedIndex() != -1) && (currAccessibilityJLabels[accessibilityList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currAccessibilityJLabels[accessibilityList.getSelectedIndex()].getBounds());
        
            currAccessibilityJLabels[accessibilityList.getSelectedIndex()].setOpaque(true);
            currAccessibilityJLabels[accessibilityList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currAccessibilityJLabels[accessibilityList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currAccessibilityNames.length; i++) {
            
            if (currAccessibilityNames[i] != null) {
                
                if (accessibilityList.getSelectedIndex() != i) {
                    
                    if (currAccessibilityJLabels[i] != null) {
                        currAccessibilityJLabels[i].setOpaque(false);
                        currAccessibilityJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_accessibilityListValueChanged

    private void compsciListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_compsciListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        bathroomsList.clearSelection();
        restaurantsList.clearSelection();
        labsList.clearSelection();
        accessibilityList.clearSelection();
        customPOIList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((compsciList.getSelectedIndex() != -1) && (currCompSciJLabels[compsciList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currCompSciJLabels[compsciList.getSelectedIndex()].getBounds());
        
            currCompSciJLabels[compsciList.getSelectedIndex()].setOpaque(true);
            currCompSciJLabels[compsciList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currCompSciJLabels[compsciList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currCompSciNames.length; i++) {
            
            if (currCompSciNames[i] != null) {
                
                if (compsciList.getSelectedIndex() != i) {
                    
                    if (currRestaurantJLabels[i] != null) {
                        
                        currCompSciJLabels[i].setOpaque(false);
                        currCompSciJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_compsciListValueChanged

    private void customPOIListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_customPOIListValueChanged
        
        // Deselect the other JLists corresponding to the other POI types
        classroomsList.clearSelection();
        bathroomsList.clearSelection();
        restaurantsList.clearSelection();
        labsList.clearSelection();
        accessibilityList.clearSelection();
        compsciList.clearSelection();
        
        // Center corresponding JLabel on map pane
        if ((customPOIList.getSelectedIndex() != -1) && (currCustomJLabels[customPOIList.getSelectedIndex()] != null)) {

            layeredMapPane.scrollRectToVisible(currCustomJLabels[customPOIList.getSelectedIndex()].getBounds());
        
            currCustomJLabels[customPOIList.getSelectedIndex()].setOpaque(true);
            currCustomJLabels[customPOIList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currCustomJLabels[customPOIList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currCustomNames.length; i++) {
            
            if (currCustomNames[i] != null) {
                
                if (customPOIList.getSelectedIndex() != i) {
                    
                    if (currRestaurantJLabels[i] != null) {
                        
                        currCustomJLabels[i].setOpaque(false);
                        currCustomJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_customPOIListValueChanged

        
    private void createMetaPOIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMetaPOIButtonActionPerformed
        // TODO add your handling code here:
                createMetaPOIButton.setBackground(new Color(177, 216, 242));
        createMetaPOIButton.setOpaque(true);
        createMetaPOIButton.setBorderPainted(false);
        mapLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                
                
                
            
                // initialize the variables to store previous entered text
                String prevName = "";
                String prevDesc = "";
                String prevRoomNum = "";
                int prevCategory;


                while (true) {
                    JFrame createPOIFrame = new JFrame();
                    
                    JPanel createPOIPanel = new JPanel();
                    createPOIPanel.setLayout(new BoxLayout(createPOIPanel, BoxLayout.Y_AXIS));
    
                    JTextField getName = new JTextField(prevName, 20);
                    JTextField getDesc = new JTextField(prevDesc, 30);
                    JTextField getRoomNum = new JTextField(prevRoomNum, 10);
                    String[] categories = {"Classrooms", "Bathrooms", "Restaurants", "Labs", "Accessibility", "Computer Science"};
                    JComboBox<String> categoryBox = new JComboBox<>(categories);

                    JLabel nameLabel = new JLabel("Name:");
                    JLabel descLabel = new JLabel("Description:");
                    JLabel roomNumLabel = new JLabel("Room Number:");
                    JLabel categoryLabel = new JLabel("Category");


                    createPOIPanel.add(nameLabel);
                    createPOIPanel.add(getName);
                    createPOIPanel.add(descLabel);
                    createPOIPanel.add(getDesc);
                    createPOIPanel.add(roomNumLabel);
                    createPOIPanel.add(getRoomNum);
                    createPOIPanel.add(categoryLabel);
                    createPOIPanel.add(categoryBox);
                    createPOIFrame.add(createPOIPanel);
                    createPOIFrame.addWindowListener(new WindowAdapter() {
                        public void windowClosing(WindowEvent e) {
                            int option = JOptionPane.showConfirmDialog(createPOIPanel, "Are you sure you want to close?", "Warning", JOptionPane.YES_NO_OPTION);
                            if (option == JOptionPane.YES_OPTION) {
                                createMetaPOIButton.setOpaque(false);
                                createMetaPOIButton.setContentAreaFilled(false);
                                createPOIFrame.dispose();
                            }
                        }
            
                     });
                    
 

                    int result = JOptionPane.showConfirmDialog(null, createPOIPanel, "Enter POI information",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                    if (result == JOptionPane.OK_OPTION) { //user clicked OK
                        String poiName = getName.getText();
                        String poiDesc = getDesc.getText();
                        String poiRoomNum = getRoomNum.getText();
                        int category =  categoryBox.getSelectedIndex();
  
                        if (poiName.equals("") || poiRoomNum.equals("") || categoryBox.getSelectedItem() == null) { // if user did not fill in name or room number
                            JOptionPane.showMessageDialog(null, "Please fill in a name, category and room number", "Error", JOptionPane.ERROR_MESSAGE);
                            prevName = poiName;             // save the entered text to variables
                            prevDesc = poiDesc;
                            prevRoomNum = poiRoomNum;
                            prevCategory = category;} 
                        else {  //user filled in all fields correctly 
                            String currBuildingString = getBuildingString(currBuildingNum);
                            POI newMetaPOI = new POI(false, true, category, poiName, poiRoomNum, poiDesc, currBuildingString, currFloorNum, x, y, false);
                            systemMonitor.metapois.add(newMetaPOI);
                            systemMonitor.getBuildingsArray()[currBuildingNum].getFloors().get(currFloorNum).addPOI(newMetaPOI); // add to Floor Linked List
                            initializeMapPOI();
                            
                            
                            mapLabel.removeMouseListener(this);
                            createMetaPOIButton.setOpaque(true);
                            createMetaPOIButton.setBackground(null);
                            createMetaPOIButton.setBorderPainted(true);
                            break;
                        } 
                    } 
                    else { // user clicked cancel or close instead of OK
                        mapLabel.removeMouseListener(this);
                        createMetaPOIButton.setOpaque(true);
                            createMetaPOIButton.setBackground(null);
                            createMetaPOIButton.setBorderPainted(true);
                        break;
                    } 
    
                }
    
            }
        });
    }//GEN-LAST:event_createMetaPOIButtonActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        try{
            File file = new File("src/resources/info/help.html");
            
            if(file.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(file);
                }
                else{
                    JOptionPane.showMessageDialog(this, "File does not exist");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "File does not exist");
            }
        }
        catch(Exception e){
            System.out.println("Error reading help.html file.");
        }
    }//GEN-LAST:event_fileMenuActionPerformed

    private void editMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuActionPerformed

    }//GEN-LAST:event_editMenuActionPerformed

    private void editMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMenuMouseEntered
   
    }//GEN-LAST:event_editMenuMouseEntered

    private void fileMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMouseEntered
        
    }//GEN-LAST:event_fileMenuMouseEntered

    private void fileMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMousePressed
        try{
            File file = new File("src/resources/info/help.html");
            
            if(file.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(file);
                }
                else{
                    JOptionPane.showMessageDialog(this, "File does not exist");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "File does not exist");
            }
        }
        catch(Exception e){
            System.out.println("Error reading file.html file.");
        }
    }//GEN-LAST:event_fileMenuMousePressed

    private void editMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMenuMousePressed
        try{
            File file = new File("src/resources/info/about.html");
            
            if(file.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(file);
                }
                else{
                    JOptionPane.showMessageDialog(this, "File does not exist");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "File does not exist");
            }
        }
        catch(Exception e){
            System.out.println("Error reading about menu.");
        }
    }//GEN-LAST:event_editMenuMousePressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        POI searchResult = systemMonitor.search(tfSearch.getText());
        
        if (searchResult != null) {
            
            currFloorNum = searchResult.getFloor();
            
            if (searchResult.getBuilding().equals("MC")) {
                
                currBuildingNum = 0;
                
                currMapNames = GUISource.getMapNames("MiddlesexCollege");
                currMapFiles = GUISource.getMapFiles("MiddlesexCollege");

                systemMonitor.setBuildingNum(currBuildingNum);
                systemMonitor.setFloorNum(currFloorNum);

                MasterPanel.removeAll();

                floorList.setListData(currMapNames);

                URL mapFile;
                mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[currFloorNum]);
                try {
                    mapImage = ImageIO.read(mapFile);
                    mapLabel.setIcon(new ImageIcon(mapImage));
                    mapLabel.setText("");
                } catch (IOException ex) {
                    System.out.println("Error reading POI image");
                    System.out.println("Your class path is: " + System.getProperty("java.class.path"));
                }

                MasterPanel.add(FloorViewPanel);
                MasterPanel.repaint();
                MasterPanel.revalidate();

                initializeMapPOI();
                
                switch (searchResult.getCategory()) {                    
                    case 0:
                        for (int i = 0; i < currClassroomPOIs.length; i++) {
                            
                            if (currClassroomPOIs[i] != null) {
                                if (currClassroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    classroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 1:
                        for (int i = 0; i < currBathroomPOIs.length; i++) {
                            
                            if (currBathroomPOIs[i] != null) {
                                if (currBathroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    bathroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 2:
                        for (int i = 0; i < currRestaurantPOIs.length; i++) {
                            
                            if (currRestaurantPOIs[i] != null) {
                                if (currRestaurantPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    restaurantsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 3:
                        for (int i = 0; i < currLabPOIs.length; i++) {
                            
                            if (currLabPOIs[i] != null) {
                                if (currLabPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    labsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 4:
                        for (int i = 0; i < currAccessibilityPOIs.length; i++) {
                            
                            if (currAccessibilityPOIs[i] != null) {
                                if (currAccessibilityPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    accessibilityList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 5:
                        for (int i = 0; i < currCompSciPOIs.length; i++) {
                            
                            if (currCompSciPOIs[i] != null) {
                                if (currCompSciPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    compsciList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 6:
                        for (int i = 0; i < currCustomPOIs.length; i++) {
                            
                            if (currCustomPOIs[i] != null) {
                                if (currCustomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    customPOIList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    default:
                        break;
                }
            }
            else if (searchResult.getBuilding().equals("PAB")) {
                
                currBuildingNum = 1;
                
                currMapNames = GUISource.getMapNames("PhysicsAstronomy");
                currMapFiles = GUISource.getMapFiles("PhysicsAstronomy");

                systemMonitor.setBuildingNum(currBuildingNum);
                systemMonitor.setFloorNum(currFloorNum);

                MasterPanel.removeAll();

                floorList.setListData(currMapNames);

                URL mapFile;
                mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[currFloorNum]);
                try {
                    mapImage = ImageIO.read(mapFile);
                    mapLabel.setIcon(new ImageIcon(mapImage));
                    mapLabel.setText("");
                } catch (IOException ex) {
                    System.out.println("Error reading POI image");
                    System.out.println("Your class path is: " + System.getProperty("java.class.path"));
                }

                MasterPanel.add(FloorViewPanel);
                MasterPanel.repaint();
                MasterPanel.revalidate();

                initializeMapPOI();
                
                switch (searchResult.getCategory()) {                    
                    case 0:
                        for (int i = 0; i < currClassroomPOIs.length; i++) {
                            
                            if (currClassroomPOIs[i] != null) {
                                if (currClassroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    classroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 1:
                        for (int i = 0; i < currBathroomPOIs.length; i++) {
                            
                            if (currBathroomPOIs[i] != null) {
                                if (currBathroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    bathroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 2:
                        for (int i = 0; i < currRestaurantPOIs.length; i++) {
                            
                            if (currRestaurantPOIs[i] != null) {
                                if (currRestaurantPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    restaurantsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 3:
                        for (int i = 0; i < currLabPOIs.length; i++) {
                            
                            if (currLabPOIs[i] != null) {
                                if (currLabPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    labsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 4:
                        for (int i = 0; i < currAccessibilityPOIs.length; i++) {
                            
                            if (currAccessibilityPOIs[i] != null) {
                                if (currAccessibilityPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    accessibilityList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 5:
                        for (int i = 0; i < currCompSciPOIs.length; i++) {
                            
                            if (currCompSciPOIs[i] != null) {
                                if (currCompSciPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    compsciList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 6:
                        for (int i = 0; i < currCustomPOIs.length; i++) {
                            
                            if (currCustomPOIs[i] != null) {
                                if (currCustomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    customPOIList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    default:
                        break;
                }
            }
            else {
                
                currBuildingNum = 2;
                
                currMapNames = GUISource.getMapNames("NaturalScience");
                currMapFiles = GUISource.getMapFiles("NaturalScience");

                systemMonitor.setBuildingNum(currBuildingNum);
                systemMonitor.setFloorNum(currFloorNum);

                MasterPanel.removeAll();

                floorList.setListData(currMapNames);

                URL mapFile;
                mapFile =  GUI.class.getClassLoader().getResource(currMapFiles[currFloorNum]);
                try {
                    mapImage = ImageIO.read(mapFile);
                    mapLabel.setIcon(new ImageIcon(mapImage));
                    mapLabel.setText("");
                } catch (IOException ex) {
                    System.out.println("Error reading POI image");
                    System.out.println("Your class path is: " + System.getProperty("java.class.path"));
                }

                MasterPanel.add(FloorViewPanel);
                MasterPanel.repaint();
                MasterPanel.revalidate();

                initializeMapPOI();
                
                switch (searchResult.getCategory()) {                    
                    case 0:
                        for (int i = 0; i < currClassroomPOIs.length; i++) {
                            
                            if (currClassroomPOIs[i] != null) {
                                if (currClassroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    classroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 1:
                        for (int i = 0; i < currBathroomPOIs.length; i++) {
                            
                            if (currBathroomPOIs[i] != null) {
                                if (currBathroomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    bathroomsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 2:
                        for (int i = 0; i < currRestaurantPOIs.length; i++) {
                            
                            if (currRestaurantPOIs[i] != null) {
                                if (currRestaurantPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    restaurantsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 3:
                        for (int i = 0; i < currLabPOIs.length; i++) {
                            
                            if (currLabPOIs[i] != null) {
                                if (currLabPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    labsList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 4:
                        for (int i = 0; i < currAccessibilityPOIs.length; i++) {
                            
                            if (currAccessibilityPOIs[i] != null) {
                                if (currAccessibilityPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    accessibilityList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 5:
                        for (int i = 0; i < currCompSciPOIs.length; i++) {
                            
                            if (currCompSciPOIs[i] != null) {
                                if (currCompSciPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    compsciList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    case 6:
                        for (int i = 0; i < currCustomPOIs.length; i++) {
                            
                            if (currCustomPOIs[i] != null) {
                                if (currCustomPOIs[i].getRoomNum().equals(searchResult.getRoomNum())) {
                                    
                                    customPOIList.setSelectedIndex(i);
                                }
                            }
                        }   break;
                    default:
                        break;
                }
            }
            
            tabbedPane.setSelectedIndex(0);
        }
        else {
            
            JOptionPane.showMessageDialog (null, "No matching POI was found.", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void favouritesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_favouritesListValueChanged
        
        // Center corresponding JLabel on map pane
        if ((favouritesList.getSelectedIndex() != -1) && (currFavouriteJLabels[favouritesList.getSelectedIndex()] != null)) {
            
            layeredMapPane.scrollRectToVisible(currFavouriteJLabels[favouritesList.getSelectedIndex()].getBounds());
            
            currFavouriteJLabels[favouritesList.getSelectedIndex()].setOpaque(true);
            currFavouriteJLabels[favouritesList.getSelectedIndex()].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
            currFavouriteJLabels[favouritesList.getSelectedIndex()].setBackground(Color.yellow);
        }
        
        for (int i = 0; i < currFavouriteNames.length; i++) {
            
            if (currFavouriteNames[i] != null) {
                
                if (favouritesList.getSelectedIndex() != i) {
                    
                    if (currFavouriteJLabels[i] != null) {
                  
                        currFavouriteJLabels[i].setOpaque(false);
                        currFavouriteJLabels[i].setBorder(null);
                    }
                }
            }
        }
    }//GEN-LAST:event_favouritesListValueChanged

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        
        if (systemMonitor.getDeveloperMode() != null) {
        
            int selectedIndex = tabbedPane.getSelectedIndex();

            if (selectedIndex == 3) {

                for (int i = 0; i < currFavouriteNames.length; i++) {
                    
                    currFavouritePOIs[i] = null;
                    currFavouriteNames[i] = null;
                    currFavouriteJLabels[i] = null;
                }

                int index = 0;

                for (int i = 0; i < currClassroomJLabels.length; i++) {

                    if (currClassroomPOIs[i] != null) {

                        if (currClassroomPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currClassroomNames[i];
                            currFavouriteJLabels[index] = currClassroomJLabels[i];

                            index++;
                        }
                        else {

                        layeredMapPane.remove(currClassroomJLabels[i]);
                        }
                    }
                }
                for (int i = 0; i < currBathroomJLabels.length; i++) {

                    if (currBathroomPOIs[i] != null) {

                        if (currBathroomPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currBathroomNames[i];
                            currFavouriteJLabels[index] = currBathroomJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currBathroomJLabels[i]);
                        }
                    }

                }
                for (int i = 0; i < currRestaurantJLabels.length; i++) {

                    if (currRestaurantPOIs[i] != null) {

                        if (currRestaurantPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currRestaurantNames[i];
                            currFavouriteJLabels[index] = currRestaurantJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currRestaurantJLabels[i]);
                        }
                    }

                }
                for (int i = 0; i < currLabJLabels.length; i++) {

                    if (currLabPOIs[i] != null) {

                        if (currLabPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currLabNames[i];
                            currFavouriteJLabels[index] = currLabJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currLabJLabels[i]);
                        }
                    }

                }
                for (int i = 0; i < currAccessibilityJLabels.length; i++) {

                    if (currAccessibilityPOIs[i] != null) {

                        if (currAccessibilityPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currAccessibilityNames[i];
                            currFavouriteJLabels[index] = currAccessibilityJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currAccessibilityJLabels[i]);
                        }
                    }

                }
                for (int i = 0; i < currCompSciJLabels.length; i++) {

                    if (currCompSciPOIs[i] != null) {

                        if (currCompSciPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currCompSciNames[i];
                            currFavouriteJLabels[index] = currCompSciJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currCompSciJLabels[i]);
                        }
                    }

                }
                for (int i = 0; i < currCustomJLabels.length; i++) {

                    if (currCustomPOIs[i] != null) {

                        if (currCustomPOIs[i].isFavourite()) {

                            currFavouriteNames[index] = currCustomNames[i];
                            currFavouriteJLabels[index] = currCustomJLabels[i];

                            index++;
                        }
                        else {

                            layeredMapPane.remove(currCustomJLabels[i]);
                        }
                    }

                }

                favouritesList.setListData(currFavouriteNames);

                layeredMapPane.repaint();
                layeredMapPane.revalidate();
                
                
            }
            else {

                initializeMapPOI();
            }
        }
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void getWeather() {
        weather = new Weather();
        this.weatherDesc = weather.getDesc();
        this.weatherTemp = weather.getTemp();
        this.tempString = roundTemp(weatherTemp) + "\u00B0";
        this.weatherCode = weather.getCode();
        this.weatherIcon = "icons/" + weather.getCode() + ".png";

    }
    
    private void displayWeather(JPanel weatherPanel) {
            getWeather();
            
            
            weatherPanel.setBackground(new Color	(163, 195, 231));
            JLabel weatherText;
            JLabel weatherTemp;

                weatherText = new JLabel(weather.getDesc());
                weatherText.setHorizontalTextPosition(JLabel.CENTER);
                weatherText.setVerticalTextPosition(JLabel.BOTTOM);
                weatherText.setForeground(Color.WHITE);
                weatherText.setFont(new Font("Optima", Font.PLAIN, 16));
                weatherText.setVerticalAlignment(JLabel.CENTER);
                
                JLabel testLabel = new JLabel("test");
                weatherPanel.add(testLabel);
    
                URL iconURL;
                iconURL =  GUI.class.getClassLoader().getResource(weatherIcon);
                try {
                    iconImage = ImageIO.read(iconURL);
                }
                catch (Exception e) {
                    System.out.println("Error displaying weather API.");
                }
                weatherText.setIcon(new ImageIcon(iconImage)); 
                weatherText.setBounds(10,-40,200,200);
                weatherPanel.add(weatherText);
                
                
                weatherTemp = new JLabel(tempString);
                weatherTemp.setHorizontalTextPosition(JLabel.RIGHT);
                weatherTemp.setVerticalTextPosition(JLabel.CENTER);
                weatherTemp.setForeground(Color.WHITE);
                weatherTemp.setFont(new Font("Optima", Font.PLAIN, 24));
                weatherTemp.setVerticalAlignment(JLabel.TOP);
                weatherTemp.setBounds(200,30,65,55);
                weatherPanel.add(weatherTemp);

                
            
        }
    
    private String getWeatherCode() {
            return this.weatherCode;
        }
        
    private double getWeatherTemp() {
            return this.weatherTemp;
        }
        
    private String getWeatherDesc() {
            return this.weatherDesc;
        }
        
    private static String roundTemp (double temp) {
            DecimalFormat roundedTemp = new DecimalFormat("##.#");
            return roundedTemp.format(temp);
        }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
            systemMonitor.startUp();

    }
    
    private void initializeMapPOI() {

        int currBuildingNum = systemMonitor.getCurrBuildingNum();
        int currFloorNum = systemMonitor.getCurrFloorNum();
        
        // Clear old POI array values and remove old POI Jlabels from map panel
        for (int i = 0; i < currClassroomPOIs.length; i++) {
            
            if (currClassroomJLabels[i] != null) {
                layeredMapPane.remove(currClassroomJLabels[i]);
            }
            currClassroomPOIs[i] = null;
            currClassroomNames[i] = null;
            currClassroomJLabels[i] = null;
            
            if (currBathroomJLabels[i] != null) {
                layeredMapPane.remove(currBathroomJLabels[i]);
            }
            currBathroomPOIs[i] = null;
            currBathroomNames[i] = null;
            currBathroomJLabels[i] = null;
            
            if (currRestaurantJLabels[i] != null) {
                layeredMapPane.remove(currRestaurantJLabels[i]);
            }
            currRestaurantPOIs[i] = null;
            currRestaurantNames[i] = null;
            currRestaurantJLabels[i] = null;
            
            if (currLabJLabels[i] != null) {
                layeredMapPane.remove(currLabJLabels[i]);
            }
            currLabPOIs[i] = null;
            currLabNames[i] = null;
            currLabJLabels[i] = null;
            
            if (currAccessibilityJLabels[i] != null) {
                layeredMapPane.remove(currAccessibilityJLabels[i]);
            }
            currAccessibilityPOIs[i] = null;
            currAccessibilityNames[i] = null;
            currAccessibilityJLabels[i] = null;
            
            if (currCompSciJLabels[i] != null) {
                layeredMapPane.remove(currCompSciJLabels[i]);
            }
            currCompSciPOIs[i] = null;
            currCompSciNames[i] = null;
            currCompSciJLabels[i] = null;
            
            if (currCustomJLabels[i] != null) {
                layeredMapPane.remove(currCustomJLabels[i]);
            }
            currCustomPOIs[i] = null;
            currCustomNames[i] = null;
            currCustomJLabels[i] = null;
        }
        
        // Convert floor LinkedLists to arrays
        POI[] currClassrooms = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).classroomsToArray();
        POI[] currBathrooms = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).bathroomsToArray();
        POI[] currRestaurants = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).restaurantsToArray();
        POI[] currLabs = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).labsToArray();
        POI[] currAccessibility = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).accessibilityToArray();
        POI[] currCompSci = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).compsciToArray();
        POI[] currCustom = (systemMonitor.getBuildingsArray())[currBuildingNum].getFloors().get(currFloorNum).customToArray();
        
        // Set values of global arrays
        for (int i = 0; i < currClassrooms.length; i++) {
            
            currClassroomPOIs[i] = currClassrooms[i];
            currClassroomNames[i] = currClassrooms[i].getName();
            classroomsList.setListData(currClassroomNames);
            currClassroomJLabels[i] = new POIJLabel();
            
            currClassroomJLabels[i].connectPOI(currClassroomPOIs[i]);
            createPOIJLabel(currClassroomJLabels[i]);
            
            try {
                currClassroomJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/classroom.png"))));
            } catch (IOException ex) {
                System.out.println("Error with POIjLabel.");
            }
            currClassroomJLabels[i].setBounds(currClassrooms[i].getxCoordinate(), currClassrooms[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[0] == true) {
                layeredMapPane.add(currClassroomJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currBathrooms.length; i++) {
            
            currBathroomPOIs[i] = currBathrooms[i];
            currBathroomNames[i] = currBathrooms[i].getName();
            bathroomsList.setListData(currBathroomNames);
            currBathroomJLabels[i] = new POIJLabel();
            
            currBathroomJLabels[i].connectPOI(currBathroomPOIs[i]);
            createPOIJLabel(currBathroomJLabels[i]);
            
            try {
                currBathroomJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/bathroom.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currBathroomJLabels[i].setBounds(currBathrooms[i].getxCoordinate(), currBathrooms[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[1] == true) {
                layeredMapPane.add(currBathroomJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currRestaurants.length; i++) {
            
            currRestaurantPOIs[i] = currRestaurants[i];
            currRestaurantNames[i] = currRestaurants[i].getName();
            restaurantsList.setListData(currRestaurantNames);
            currRestaurantJLabels[i] = new POIJLabel();
            
            currRestaurantJLabels[i].connectPOI(currRestaurantPOIs[i]);
            createPOIJLabel(currRestaurantJLabels[i]);
            
            try {
                currRestaurantJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/restaurant.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currRestaurantJLabels[i].setBounds(currRestaurants[i].getxCoordinate(), currRestaurants[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[2] == true) {
                layeredMapPane.add(currRestaurantJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currLabs.length; i++) {
            
            currLabPOIs[i] = currLabs[i];
            currLabNames[i] = currLabs[i].getName();
            labsList.setListData(currLabNames);
            currLabJLabels[i] = new POIJLabel();
            
            currLabJLabels[i].connectPOI(currLabPOIs[i]);
            createPOIJLabel(currLabJLabels[i]);
            
            try {
                currLabJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/lab.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currLabJLabels[i].setBounds(currLabs[i].getxCoordinate(), currLabs[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[3] == true) {
                layeredMapPane.add(currLabJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currAccessibility.length; i++) {
            
            currAccessibilityPOIs[i] = currAccessibility[i];
            currAccessibilityNames[i] = currAccessibility[i].getName();
            accessibilityList.setListData(currAccessibilityNames);
            currAccessibilityJLabels[i] = new POIJLabel();
            
            currAccessibilityJLabels[i].connectPOI(currAccessibilityPOIs[i]);
            createPOIJLabel(currAccessibilityJLabels[i]);
            
            try {
                currAccessibilityJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/accessibility.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currAccessibilityJLabels[i].setBounds(currAccessibility[i].getxCoordinate(), currAccessibility[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[4] == true) {
                layeredMapPane.add(currAccessibilityJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currCompSci.length; i++) {
            
            currCompSciPOIs[i] = currCompSci[i];
            currCompSciNames[i] = currCompSci[i].getName();
            compsciList.setListData(currCompSciNames);
            currCompSciJLabels[i] = new POIJLabel();
            
            currCompSciJLabels[i].connectPOI(currCompSciPOIs[i]);
            createPOIJLabel(currCompSciJLabels[i]);
            
            try {
                currCompSciJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/computerscience.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currCompSciJLabels[i].setBounds(currCompSci[i].getxCoordinate(), currCompSci[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[5] == true) {
                layeredMapPane.add(currCompSciJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }
        
        for (int i = 0; i < currCustom.length; i++) {
            
            currCustomPOIs[i] = currCustom[i];
            currCustomNames[i] = currCustom[i].getName();
            customPOIList.setListData(currCustomNames);
            currCustomJLabels[i] = new POIJLabel();
            
            currCustomJLabels[i].connectPOI(currCustomPOIs[i]);
            createPOIJLabel(currCustomJLabels[i]);
            
            try {
                currCustomJLabels[i].setIcon(new ImageIcon(ImageIO.read(GUI.class.getClassLoader().getResource("imgs/poi.png"))));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            currCustomJLabels[i].setBounds(currCustom[i].getxCoordinate(), currCustom[i].getyCoordinate(), 40, 40);
            
            if (selectedLayers[6] == true) {
                layeredMapPane.add(currCustomJLabels[i], 0); // Move this elsewhere to establish layers
            }
        }

    
    }
    

    
      private void createPOIJLabel(POIJLabel label) {
        // If change loc button clicked
        
        if (systemMonitor.getIsDeveloper() == false && label.getAssociatedPOI().getCategory() != 6) {
            label.editButton.setVisible(false);
            label.editButton.setEnabled(false);
            label.saveButton.setVisible(false);
            label.saveButton.setEnabled(false);
        }
        
        label.favouriteBox.setSelected(label.getAssociatedPOI().isFavourite());
        
        label.favouriteBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    systemMonitor.userfavs.add(label.getAssociatedPOI().getRoomNum());
                    Boolean fav = label.favouriteBox.isSelected();
                        label.getAssociatedPOI().setFavourite(fav);
                    //label.getAssociatedPOI().setFavourite(true);
                     Regular_User user = new Regular_User();
                        try {
                            user.userFavOutputter(systemMonitor.getcurrUsername(), systemMonitor.userfavs);
                        }
                        catch (Exception ex) {
                            System.out.println("Error in favouriting this POI.");
                        }
                        initializeMapPOI();
                        label.favouriteBox.repaint();
                        label.favouriteBox.revalidate();
                } 
                else if (e.getStateChange() == ItemEvent.DESELECTED) {
                    systemMonitor.userfavs.remove(label.getAssociatedPOI().getRoomNum());
                    Boolean fav = label.favouriteBox.isSelected();
                        label.getAssociatedPOI().setFavourite(fav);
                    //label.getAssociatedPOI().setFavourite(false);
                    Regular_User user = new Regular_User();
                        try {
                            user.userFavOutputter(systemMonitor.getcurrUsername(), systemMonitor.userfavs);
                        }
                        catch (Exception ex) {
                            System.out.println("Error in favouriting this POI.");
                        }
                         initializeMapPOI();
                        label.favouriteBox.repaint();
                        label.favouriteBox.revalidate();
                }
            }
        });
        
        label.changeLocButton.setBackground(new Color(177, 216, 242));
        label.changeLocButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                label.changeLocButton.setText("Click on new location");
                label.changeLocButton.setOpaque(true);
                createPOIButton.setBorderPainted(false);
                mapLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        label.getAssociatedPOI().setxCoordinate(e.getX());
                        label.getAssociatedPOI().setyCoordinate(e.getY());
                        label.changeLocButton.setText("Change Location");
                        label.changeLocButton.setOpaque(false);
                        createPOIButton.setBorderPainted(true);
                        mapLabel.removeMouseListener(this);
                        initializeMapPOI();
                        FloorViewPanel.repaint();
                        FloorViewPanel.revalidate();
                    }
                });
            }
        });
        
        // Delete button
        label.deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "Delete POI", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) { // choose to delete
                    // ADD FUNCTION TO DELETE POI HERE
                    POI toDeletePOI = label.getAssociatedPOI();
                    if (toDeletePOI.getCategory() == 6) {
                        systemMonitor.userpois.remove(toDeletePOI);
                     }
                    else {systemMonitor.metapois.remove(toDeletePOI);}
                    systemMonitor.getBuildingsArray()[currBuildingNum].getFloors().get(currFloorNum).delete(toDeletePOI); //  delete from Floor Linked List
                    initializeMapPOI();
                    FloorViewPanel.repaint();
                    label.setVisible(false);
                    label.setEnabled(false);
                    label.poiInfoFrame.dispose();
                    
                    return;
                }
                else { // choose to cancel 
                // keep frame up and icon highlighted
                    label.poiInfoFrame.setVisible(true);
                    label.setOpaque(true);
                    label.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
                    label.setBackground(Color.yellow);    
                }
            }
        });
        
        label.saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                initializeMapPOI();
                FloorViewPanel.repaint();
                FloorViewPanel.revalidate();

            }
        });
        
               

        
    }
      
    
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BuildingSelectPanel;
    private javax.swing.JButton Create;
    private javax.swing.JPanel FloorViewPanel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JPanel MasterPanel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel accessibilityLabel;
    private javax.swing.JList<String> accessibilityList;
    private javax.swing.JToggleButton accessibilityToggleButton;
    private javax.swing.JPanel addPOIsTab;
    private javax.swing.JLabel bathroomsLabel;
    private javax.swing.JList<String> bathroomsList;
    private javax.swing.JToggleButton bathroomsToggleButton;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnMiddlesex;
    private javax.swing.JButton btnNatSci;
    private javax.swing.JButton btnPAB;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton buildingButton;
    private javax.swing.JLabel classroomsLabel;
    private javax.swing.JList<String> classroomsList;
    private javax.swing.JToggleButton classroomsToggleButton;
    private javax.swing.JLabel compsciLabel;
    private javax.swing.JList<String> compsciList;
    private javax.swing.JToggleButton compsciToggleButton;
    private javax.swing.JButton createMetaPOIButton;
    private javax.swing.JButton createPOIButton;
    private javax.swing.JLabel customPOILabel;
    private javax.swing.JList<String> customPOIList;
    private javax.swing.JToggleButton customToggleButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JList<String> favouritesList;
    private javax.swing.JPanel favouritesTab;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JList<String> floorList;
    private javax.swing.JPanel floorPOIPanel;
    private javax.swing.JPanel floorPOIsTab;
    private javax.swing.JScrollPane floorsScrollPane;
    private javax.swing.JPanel floorsTab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel jlDeveloperCheck;
    private javax.swing.JLabel jlLoginVerify;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JLabel jlUsername;
    private javax.swing.JLabel labsLabel;
    private javax.swing.JList<String> labsList;
    private javax.swing.JToggleButton labsToggleButton;
    private javax.swing.JLayeredPane layeredMapPane;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JScrollPane mapScrollPane;
    private javax.swing.JButton mapShowButton;
    private javax.swing.JLabel noMapSelectedButton;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JLabel restaurantsLabel;
    private javax.swing.JList<String> restaurantsList;
    private javax.swing.JToggleButton restaurantsToggleButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfUsername;
    private javax.swing.JPanel weatherTab;
    // End of variables declaration//GEN-END:variables
}
